on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      docker-repo:
        required: true
        type: string
      cache-version:
        required: false
        type: string
        default: v1
      is-package:
        required: true
        type: string
      renv-version:
        required: false
        type: string
        default: 1.0.2
      install-package-command:
        required: false
        type: string
        default: echo "no command"
      
jobs:
  common-r-api-build:
    runs-on: ubuntu-latest
    container:
      image: powerex/pwx-r:4.3.0
    env:
      GITHUB_PAT: "${{ secrets.ACCESS_TOKEN_GITHUB }}"
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: false
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          set-safe-directory: true

      - name: Test GitHub PAT
        run: |
          RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: token $GITHUB_PAT" https://api.github.com/user)
          HTTP_STATUS=${RESPONSE:(-3)}
          CONTENT=${RESPONSE:0:(-3)}

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "PAT is not working as expected"
            exit 1
          else
            LOGIN_COUNT=$(echo $CONTENT | grep -c login)
            if [ "$LOGIN_COUNT" -eq 0 ]; then
              echo "PAT is deprecated"
              exit 1
            else
              echo "PAT is working as expected"
            fi
          fi

      - name: Initialize global renv
        uses: PowereX-jsa/r-actions/setup-renv@4_3_0_rstudio_test
        with:
          working-dir: ${{ inputs.working-directory }}
          renv-version: ${{ inputs.renv-version }}
          cache-version: ${{ inputs.cache-version }}
         
      # used in poweRex.nomination -> parallel run - needs to be installed before tests
      - name: Install package via r cmd
        run: |
            ${{ inputs.install-package-command }}
        shell: bash {0}
             
      # Declares the repository safe and not under dubious ownership.
      - name: Add repository to git safe directories
        run: git config --global --add safe.directory $GITHUB_WORKSPACE
             
      - name: Run tests and report
        if: inputs.is-package == 'true'
        uses: PowereX-jsa/r-actions/devtools-test-package@master
        with:
          package-dir: ${{ inputs.working-directory }}
          activate-renv: "TRUE"
          
      - name: Run tests and report
        if: inputs.is-package == 'false'
        uses: PowereX-jsa/r-actions/run-tests@master
        with:
          test-dir: ${{ inputs.working-directory }}/tests/testthat

      # building docker images
      - name: Set docker tag
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/master' ]]; then
            echo "TAG=latest,prod_$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          else
            echo "TAG=$(echo test-deploy_${{ github.head_ref }} | tr -s '/' '_' | tr -s '#' '_' )" >> "$GITHUB_ENV"
          fi
      - name: Show docker image tag
        run: |
          echo "going to use following tag for docker image: ${{ env.TAG }}"
      - name: Docker build and push
        uses: kciter/aws-ecr-action@master
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: ${{ inputs.docker-repo }}
          region: eu-central-1
          tags: ${{ env.TAG }}
          dockerfile: "${{ inputs.working-directory }}/Dockerfile"
          create_repo: false
          set_repo_policy: false
          repo_policy_file: repo-policy.json
          path: ${{ inputs.working-directory }}
          
